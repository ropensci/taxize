% Template for PLoS
% Version 1.0 January 2009
%
% To compile to pdf, run:
% latex plos.template
% bibtex plos.template
% latex plos.template
% latex plos.template
% dvipdf plos.template

\documentclass[10pt]{article}

% amsmath package, useful for mathematical formulas
\usepackage{amsmath}
% amssymb package, useful for mathematical symbols
\usepackage{amssymb}

% graphicx package, useful for including eps and pdf graphics
% include graphics with the command \includegraphics
\usepackage{graphicx}

% cite package, to clean up citations in the main text. Do not remove.
\usepackage{cite}

\usepackage{color} 

% Use doublespacing - comment out for single spacing
%\usepackage{setspace} 
%\doublespacing


% Text layout
\topmargin 0.0cm
\oddsidemargin 0.5cm
\evensidemargin 0.5cm
\textwidth 16cm 
\textheight 21cm

% Bold the 'Figure #' in the caption and separate it with a period
% Captions will be left justified
\usepackage[labelfont=bf,labelsep=period,justification=raggedright]{caption}

% Use the PLoS provided bibtex style
\bibliographystyle{plos2009}

% Remove brackets from numbering in List of References
\makeatletter
\renewcommand{\@biblabel}[1]{\quad#1.}
\makeatother


% Leave date blank
\date{}

\pagestyle{myheadings}
%% ** EDIT HERE **


%% ** EDIT HERE **
%% PLEASE INCLUDE ALL MACROS BELOW
\usepackage{hyperref}
\usepackage{array}

\newcolumntype{L}{>{\raggedright\arraybackslash}m{5cm}} % creates now column type to wrap text
%% END MACROS SECTION

\begin{document}

<<setup, include=FALSE, cache=FALSE>>=
## set global chunk options
opts_chunk$set(fig.path='figure/', fig.align='center', fig.show='hold', par=TRUE, warning=FALSE, message=FALSE, error=FALSE, comment=NA)
@

% Title must be 150 characters or less
\begin{flushleft}
{\Large
\textbf{taxize - taxonomic search and retrieval in R}
}
% Insert Author names, affiliations and corresponding author email.
\\
Scott Chamberlain$^{1}$ and 
Eduard Sz\"{o}cs$^{2}$
\\
\bf{1} Biology Department, Simon Fraser University, Canada
\\
\bf{2} Institute for Environmental Sciences, University Koblenz-Landau, Fortstr. 7, 76829 Landau, Germany
\\
$\ast$ E-mail: myrmecocystus@gmail.com
\end{flushleft}

% Please keep the abstract between 250 and 300 words
\section*{Abstract}
All species are hierarchically related to one another, and we use taxonomic names to label the nodes in this hierarchy. Taxonomic data is becoming increasingly available on the web, but scientists need a way to access taxonomic data on the web in a programmatic fashion that's easy and reproducible. We have developed taxize, an open-source software package (freely available from \url{http://cran.r-project.org/web/packages/taxize/index.html}) for the R language. taxize provides simple, programmatic access to taxonomic data for 13 data sources around the web. We discuss the need for a taxonomic toolbelt in R, and outline a suite of use cases for which taxize is ideally suited (including a full workflow as an appendix). The taxize package will facilitate open and reproducible science by allowing taxonomic data collection to be done in the open-source R platform.

% Please keep the Author Summary between 150 and 200 words
% Use first person. PLoS ONE authors please skip this step. 
% Author Summary not valid for PLoS ONE submissions.   
\section*{Author Summary}

\section*{Introduction}
Evolution by natural selection has led to a hierarchical relationship among all living organisms.  Thus, species are categorized using a taxonomic hierarchy, starting with the binomial species name (e.g, \emph{Homo sapiens}), moving up to genus (\emph{Homo}), then family (\emph{Hominidae}), and on up to Domain (\emph{Eukarya}). Biologists, whether studying organisms at the cell, organismal, or community level, can put their study taxa into taxonomic context, allowing them to know close and distant relatives, find relevant literature, and more. 

The use of taxonomic names is, unfortunately, not straightforward. Taxonomic names often change due to name changes at the generic or specific levels, lumping or splitting lower taxa (genera, species) among higher taxa (families), and name spelling changes. For example, a study found that a compilation of 308,000 plant observations from 51 digitized herbarium records had 22,100 unique taxon names, of which only ~13,000 were accepted names \cite{weiser2007,boyle2013}. The scale of this study may be larger than most, but the problem persists for any size study. In addition, there is no one authoritative taxonomic names source for all taxa - although, there are taxon specific sources that many scientists use that study that taxon. Different sources (e.g., uBio, Tropicos, ITIS) may have different accepted names for the same taxon. For example, while the Integrated Taxonomic Information Service (ITIS) has \emph{Helianthus x glaucus} as an accepted name, The Plant List \url{http://www.theplantlist.org} has that name as unresolved, but has \emph{Helianthus glaucus} as an accepted name, while ITIS doesn't have the name. 

One attempt to help inconsistencies in taxonomy is the use of numeric codes. For example, ITIS assigns a Taxonomic Serial Number (TSN) to each taxon, while the Universal Biological Indexer and Organizer (uBio) assigns each taxon a NameBank identifier (namebankID), and Tropicos assigns their own identifier to each taxon. Codes are helpful within a database as they can easily refer to, for example, \emph{Helianthus annuus} with a code like 123456 instead of its whole name. However, each database uses their own code; in this case for \emph{Helianthus annuus}, ITIS uses 36616, uBio uses 2658020, and Tropicos uses 40022652. Yet, there are no universal codes for taxa across databases, leading to additional confusion. Last, name comparisons across databases have to be done with the actual names, not the codes. 

Taxonomic data is getting easier to obtain through web interfaces (e.g., \cite{eol}). However, there are a number of good reasons to obtain taxonomic information programatically rather than through a web interface. First, if you have more than a few names to lookup on a website, it can take quite a long time to enter each name, get data, and repeat for each species. Second, programatically getting taxonomic names solves the first problem by looping over a list of names. In addition, doing taxonomic searching, etc. is reproducible. With increasing reports of irreproducibility in science \cite{stodden2010,zimmer2012}, it is extremely important to make science workflows repeatable. Science workflows can now easily incorporate text, code, and images in a single executable document \cite{yihui2013}. 

The R language is the dominant language used by biologists (reference), and now has over 4,500 packages on the Comprehensive R Archive Network (CRAN) and more than 2,500 packages on other repositories to extend R. R is great for manipulating, visualizing and fitting statistical models to data. However, the key missing piece in R is the ability to get data from the internet within R. Getting data from the web will be increasingly common as more and more data gets moved to the cloud. Increasingly, data is available from the web via application programming interfaces (API). These are bits of code that allow computers to talk to one another using code that is not human readable, but is machine readable. Web APIs often define a number of methods that allow users to search for a species name, or retrieve the synonyms for a species name, for example. A further strength of APIs is that they are language agnostic, meaning that data can be consumed in almost any computing context, allowing users to interact with the web API without having to know the details of the code. Whereas, if data are stored in an Excel file, for example, the file can only be opened in a few programs. 

The goal of taxize, an R package in development, is to make all use cases having to do with retrieving and resolving taxonomic names easy and replicable. In taxize, we have written a suite of R functions that interact with many taxonomic data sources via their web APIs (Table~\ref{tab:a}). The interface to each function is usually a simple list of species names, just as a user would do with a web API. Therefore, we hope moving from a web to R interface for taxonomic names will be relatively seamless (if one is already nominally familiar with R). 

Here, we justify the need for taxize, discuss our data sources, and run through a suite of use cases to demonstrate the variety of ways that users can interact with taxize. 


\section*{Why do we need taxize?}

There are a large suite of applications developed around the problem of searching for, resolving, and getting higher taxonomy for species names. For example, Linnaeus \cite{linnaeus} provides the ability to search for taxonomic names in documents and normalize those names found. In addition, there are many web interfaces to search for and normalize names such as Encyclopedia of Life's Global Names Resolver \cite{eolgnr}, uBio tools \cite{ubio}, and iPlant's Taxonomic Name Resolution Service \cite{tnrs}. 

All of these tools provide ways to search for taxonomic names and resolve them in some cases. However, scientists ideally need a tool that can be used programmatically, and thereby facilitate reproducible research. The goal of taxize is to make it easy to create reproducible and easy to use workflows for searching for taxonomic names, resolving them, getting higher taxonomic names, and other tasks related to research dealing with species. 

One could argue that a different programming language would have been better than R. For example, Python performs many actions faster than R, and Ruby plays really nicely in a browser, facilitating web applications. However, our goal with taxize is to create a product for researchers primarily, and the most common programming language for researchers, at least in the life sciences, is R. \cite{gentleman_bioconductor:_2004} gives a detailed discussion of advantages of R in computational biology.

\section*{Data sources and package details}
taxize uses many data sources (Table~\ref{tab:a}), and more can easily be added. There are two common tasks provided by the data sources: name search and name resolution. Other functionality in taxize includes retrieving a classification tree for a species, or retrieving child taxa of a focal taxon. One of the data sources (Phylomatic) returns phylogenies, while another (NCBI) returns genetic sequence data. However, there are other R packages that are focused solely on sequence data, such as rsnps \cite{chamberlain2013}, rentrez \cite{winter2013}, BoSSA \cite{lefeuvre2010}, and ape \cite{paradis2004}, so taxize will not venture deeply into these other domains. 

Some of the data sources taxize interacts with require authentication. That is, in addition to the search terms the user provides (e.g., \emph{Homo sapiens}), the data provider requires an alphanumeric identification key so that they can better manage their servers, collect analytics, and shut down users that abuse the API. The services that do require an API key in taxize are: Encyclopedia of Life (EOL) \cite{eol}, the Universal Biological Indexer and Organizer (uBio) \cite{ubio}, Tropicos \cite{tropicos}, and Plantminer \cite{carvalho2010plantminer}. You can easily obtain an API key by visiting the website of each service (see Table~\ref{tab:a} for links to each site). There are two ways of using your API keys. First, you can pass in your API key in a function call (e.g., \emph{ubio\_namebank(srchName='Ursus americanus', key='your\_alphanumeric\_key')}). Second, you can store your API keys in your .Rprofile file. On a Mac this file is at \emph{/yourhomefolder/.Rprofile}; on a Windows machine at \emph{/yourhomefolder/.Rprofile}; and on Linux at \emph{/yourhomefolder/.Rprofile}. This is an hidden file, so open up this file in your terminal (e.g., \emph{open .Rprofile}), and add the API key as an entry like \emph{options(myapikey = 'your\_alphanumeric\_key')}. We recommend the second option as it simplifies function calls. 

One available data source in taxize is The Plant List \cite{theplantlist}. The connection in taxize is done via the \emph{taxonstand} package \cite{Cayuela_2012} that solely interacts with that The Plant List. We provide a few convenience functions that wrap taxonstand into taxize.

taxize would not have been possible without the work of others. taxize uses httr \cite{httr} and RCurl \cite{rcurl} for doing calls to web APIs, XML \cite{xml} for parsing XML, RJSONIO \cite{rjsonio} for parsing JSON, and stringr \cite{stringr} and plyr \cite{plyr} for manipulating data.

New data sources can be added; we may add the following sources: Wikispecies and The Tree of Life. A connection to \url{freshwaterecology.info} \cite{freshwaterecology} (a database with autecological characteristics, ecological preferences and biological traits as well as distribution patterns of more than 12.000 European freshwater organisms belonging to fish, macro-invertebrates, macrophytes, diatoms and phytoplankton) will be finished when their new API will be released.
In addition, the authors may be contacted for further suggestions of data sources to be added.

\section*{Use cases}

There are a variety of use cases for which taxize is ideally suited. We discuss here several ideal use cases for taxize at length. Moreover a complete reproducible workflow from a species list to a phylogeny and a distribution map can be found in the supplement.

\subsection*{First, install taxize}

First, we must install taxize. There are two versions of taxize, a) a stable release that can be installed from the R package repository, CRAN, and b) from GitHub \cite{github_taxize}, where the code is developed.

Installing from CRAN or GitHub

<<installtaxizecran, eval=FALSE>>=
install.packages("taxize")
@ 

<<installtaxizegithub, eval=FALSE>>=
install.packages("devtools")
require(devtools)
install_github("taxize_", "ropensci")
@

Load taxize into your R session.

<<loadtaxize, eval=TRUE>>=
library(taxize)
@

\subsection*{Resolve taxonomic names}

This is a common task in biology. We often have a list of species names and we want to know if a) we have the most up to date names, b) our names are spelled correctly, and c) if we have common names, we likely need the scientific names. One way to resolve names is via the Global Names Resolver (GNR) service provided by the Encyclopedia of Life \cite{eolgnr}. Here, we are searching for two misspelled names:

<<resolvenames, eval=TRUE, cache=TRUE>>=
temp <- gnr_resolve(names = c("Helianthos annus", "Homo saapiens"), returndf = TRUE)
temp[ , -c(1,4)]
@

The correct spellings are \emph{Helianthus annuus} and \emph{Homo sapiens}. Another approach uses the Taxonomic Name Resolution Service via the Taxosaurus API \cite{taxosaurus} developed by iPLant and the Phylotastic organization. In this example, we provide a list of species names, some of which are misspelled, and we'll call the API with the \emph{tnrs} function.

<<tnrs, eval=TRUE,cache=TRUE>>=
mynames <- c("Helianthus annuus", "Pinus contort", "Poa anua", "Abis magnifica",
  	"Rosa california", "Festuca arundinace", "Sorbus occidentalos","Madia sateva")
tnrs(query = mynames)[ , -c(5:7)]
@

It turns out there are a few corrections: e.g., \emph{Madia sateva} should be \emph{Madia sativa}, and \emph{Rosa california} should be \emph{Rosa californica}. Note that this search worked because fuzzy matching was employed to retrieve names that were close, but not exact matches. Fuzzy matching is only available for plants in the TNRS service, so we advise using EOL's Global Names Resolver if you need to resolve animal names.

taxize takes the approach that the user should be able to make decisions about what resource to trust, rather than taxize making the decision. Both the EOL GNR and the TNRS services provide data from a variety of data sources. The user may trust a specific data source, thus may want to use the names from that data source. In the future, we may provide the ability for taxize to suggest the best match from a variety of sources, but since R is relatively inefficient in memory management, etc., we would rather offload this sort of computationally intensive task.

\subsection*{Retrieve higher taxonomic names}
Another task biologists often face is getting higher taxonomic names for a taxa list. Having the higher taxonomy allows you to put into context the relationships of your species list. For example, you may find out that species A and species B are in Family C, which may lead to some interesting insight, as opposed to not knowing that Species A and B are closely related. This also makes it easy to aggregate/standardize data to a specific taxonomic level (e.g., family level) or to match data to other databases with different taxonomic resolution (e.g., trait databases).

A number of data sources in taxize provide the capability to retrieve higher taxonomic names, but we will highlight two of the more useful ones: Integrated Taxonomic Information System (ITIS) \cite{itis} and National Center for Biotechnology Information (NCBI) \cite{federhen}. First, we'll search for two species, \emph{Abies procera} and \emph{Pinus contorta}.

<<itisclass, eval=TRUE,cache=TRUE>>=
specieslist <- c("Abies procera","Pinus contorta")
classification(specieslist, db = 'itis')
@

It turns out both species are in the family Pinaceae. You can also get this type of information from the NCBI by doing \emph{classification(specieslist, db = 'ncbi')}.

Instead of a full classification, you may only want a single name, say a family name for your species of interest. The function \emph{tax\_name} is built just for this purpose. As with the \emph{classification}-function you can specify the data source with the \emph{db} argument, either ITIS or NCBI. 

<<taxname, eval=TRUE,cache=TRUE>>=
tax_name(query = "Helianthus annuus", get = "family", db = "itis")
tax_name(query = "Helianthus annuus", get = "family", db = "ncbi")
@

\subsection*{Interactive name selection}
As mentioned most databases use a numeric code to reference a species. A general workflow in taxize is: Retrieve Code for the queried species and then use this code to query more data/information.
Below are a few examples. When you run these examples in R, you are presented with a command prompt asking for the row that contains the name you would like back; that output is not printed below for brevity. In this example, the search term has many matches. The function returns a data.frame of the matches, and asks for the user to input what row number to accept. 

<<interactive, eval=TRUE, echo=TRUE, cache=TRUE>>=
get_tsn(searchterm = "Heliastes", searchtype = "sciname")
@

In another example, you can pass in a long list of taxonomic names:

<<interactive_many, eval=TRUE, echo=TRUE, cache=TRUE>>=
splist <- c("annona cherimola", 'annona muricata', "quercus robur",
  	"shorea robusta", "pandanus patina", "oryza sativa", "durio zibethinus")
get_tsn(searchterm = splist, searchtype = "sciname")
@

In another example, note that no match at all returns an NA:

<<interactive_na, eval=TRUE, echo=TRUE, cache=TRUE>>=
get_uid(sciname = c("Chironomus riparius", "aaa vva"))
@

\subsection*{Retrieve a phylogeny}
Ecologists are increasingly taking a phylogenetic approach to ecology, applying phylogenies to topics such as the study of community structure \cite{webb2002phylogenies}, ecological networks \cite{rafferty2013phylogenetic}, functional trait ecology \cite{poff2006functional}. Yet, Many biologists are not adequately trained in reconstructing phylogenies. Fortunately, there are some sources for getting a phylogeny without having to know how to build one; one of these is for angiosperms, called Phylomatic \cite{webb2005}. We have created a workflow in taxize that accepts a species list, and taxize works behind the scenes to get higher taxonomic names, which are required by Phylomatic to get a phylogeny. Here is a short example, producing the tree in figure \ref{fig:phylomatic}.

<<phylomaticphylogeny_disp, eval=FALSE>>=
taxa <- c("Poa annua", "Abies procera", "Helianthus annuus")
tree <- phylomatic_tree(taxa = taxa)
tree$tip.label <- capwords(tree$tip.label)
plot(tree, cex=1)
@

<<phylomaticphylogeny, eval=TRUE, dev='pdf', out.width='4in', out.height='4in', cache=TRUE, include=FALSE>>=
# Input the taxonomic names
taxa <- c("Poa annua", "Abies procera", "Helianthus annuus")

# Fetch the tree - the formatting of names and higher taxonmy is done within the function
tree <- phylomatic_tree(taxa = taxa)

# Captilize the species names
tree$tip.label <- capwords(tree$tip.label)

# Plot the tree
plot(tree, cex=1)
@

Behind the scenes the function \emph{phylomatic\_tree} retrieves a Taxonomic Serial Number (TSN) from ITIS for each species name, then a string is created for each species like this \emph{poaceae/oryza/oryza\_sativa} (with format 'family/genus/genus\_epithet'). These strings are submitted to the Phylomatic API, and if no errors occur, a phylogeny in newick format is returned. The \emph{phylomatic\_tree()} function also cleans up the newick string and converts it to an \textbf{ape} \emph{phylo} object. The output from \emph{phylomatic\_tree()} is a \emph{phylo} object, which can be used for plotting and phylogenetic analyses. Be aware that Phylomatic has certain limitations - refer to the paper describing Phylomatic \cite{webb2005} and the website \url{http://phylodiversity.net/phylomatic/}.

There are currently no resources for getting a phylogeny of animals simply from species names. However, a few projects are working on this problem, including the Open Tree of Life \cite{opentree}. We will incorporate these resources when the appropriate APIs are available.


\subsection*{What taxa are the children of my taxon of interest?}
If someone is not a taxonomic specialist on a particular taxon he likely does not know what children taxa are within a family, or within a genus. This task becomes especially unwieldy when there are a large number of taxa downstream. You can of course go to a website like Wikispecies \cite{wikispecies} or Encyclopedia of Life \cite{eol} to get downstream names. However, taxize provides an easy way to programatically search for downstream taxa, both for the Catalogue of Life (CoL) \cite{col} and the Integrated Taxonomic Information System \cite{itis}. Here is a short example using the CoL in which we want to find all the species within the genus \emph{Apis} (honey bees).

<<downstream, eval=TRUE, cache=TRUE>>=
col_downstream(name = "Apis", downto = "Species")[[1]]
@

The result from the above call to \emph{col\_downstream()} is a data.frame that gives a number of columns of different information. 

\subsection*{IUCN Status}
There are a number of things we can do once we have the correct taxonomic names. One thing we can do is ask about the conservation status of a species (IUCN Red List of Threatened Species \cite{iucn}). We have provided a set of functions, \emph{iucn\_summary} and \emph{iucn\_status}, to search for species names, and extract the status information, respectively. Here, we search for the Panther and Lynx.  

<<iucn, eval=TRUE, cache=TRUE>>=
ia <- iucn_summary(c("Panthera uncia", "Lynx lynx"))
iucn_status(ia)
@

It turns out that the panther has a status of endangered (EN) and the lynx has a status of least concern (LN).

\subsection*{Search for available genes in GenBank}
Another use case available in taxize deals with genetic sequences. taxize has three functions to interact with GenBank to search for available genes (\emph{get\_genes\_avail}), download genes by GenBank ID (\emph{get\_genes}), and download genes via taxonomic name search, including retrieving a congeneric if the searched taxon does not exist in the database (\emph{get\_seqs}). In this example, we search for gene sequences for \emph{Umbra limi}.

<<genbank_one, eval=TRUE, cache=TRUE>>=
out <- get_genes_avail(taxon_name = "Umbra limi", seqrange = "1:2000", getrelated = FALSE)
@

Then we can ask if 'RAG1' exists in any of the gene names.

<<genbank_two, eval=TRUE, cache=TRUE>>=
out[grep("RAG1", out$genesavail, ignore.case = TRUE),]
@

It turns out that there are XX different unique records found. However, this doesn't mean that there are XX different genes found as the API does not provide metadata to classify genes. However, at the end of the example, we showed that you can use regular expressions (e.g., via \emph{grep}) to search for the gene of interest.


\subsection*{Matching species tables with different taxonomic resolution}
Biologist often need to match different sets of data tied to species. For example, trait-based approaches are a promising tool in ecology \cite{statzner_can_2010}. One problem is that abundance data must be matched with trait databases like \cite{usseglio-polatera_biological_2000}. These two data tables may contain species information on different taxonomic levels and possibly data must be aggregated to a joint taxomic level, so that the data can be merged. taxize can help in this data-cleaning step, providing a reproducible workflow: 

We can use the mentioned \emph{classification}-function to retrieve the taxonomic hierarchy and then search the hierarchies up- and downwards for matches. Here is an example to match a species with names on three different taxonomic levels.

<<tax_match, cache=TRUE, tidy=FALSE>>=
A <- "gammarus roeseli" 

B1 <- "gammarus roeseli"
B2 <- "gammarus"
B3 <- "gammaridae"

A_clas <- classification(A, db = 'ncbi')
B1_clas <- classification(B1, db = 'ncbi')
B2_clas <- classification(B2, db = 'ncbi')
B3_clas <- classification(B3, db = 'ncbi')


B1[match(A, B1)]
A_clas[[1]]$Rank[tolower(A_clas[[1]]$ScientificName) %in% B2]
A_clas[[1]]$Rank[tolower(A_clas[[1]]$ScientificName) %in% B3]
@

If we find a direct match (here \emph{Gammarus roeseli}), we are lucky. But we can also match Gammaridae with \emph{Gammarus roeseli}, but on a lower taxonomic level. A more comprehensive and realistic example (matching a trait table with an abundance table) is given in Appendix B.


\subsection*{Aggregating data to a specific taxonomic rank}
In biology, one can asks questions at varying taxonomic levels. One may perform analyses on different taxonomic levels. This use case is easily handled in taxize. A function called \emph{tax\_agg} will aggregate community data to a specific taxonomic level. In this example, we take data of 5 species and aggregate them to family level. Again we can specify if we want to use data from ITIS or NCBI.

<<tax_agg ,eval=TRUE, cache=TRUE, tidy=FALSE>>=
data(dune, package = 'vegan')
df <- dune[ , 1:5]
colnames(df) <- c("Bellis perennis", "Empetrum nigrum", "Juncus bufonius", 
                  "Juncus articulatus", "xxx")
head(df)
agg <- tax_agg(df, rank = 'family', db = 'ncbi')
agg
head(agg$x)
@

We see that the two Juncus species are aggregated to Juncaceae and their abundances are summed up. If a taxon is one lower taxonomic resolution then the querried or the taxon is not found in the database (like in the example taxon \emph{xxx}) then these are not aggregated and returned as is.


\section*{Conclusions}
Taxonomic information is increasingly sought out by biologists as we take phylogenetic and taxonomic approaches to science. Taxonomic data is quickly becoming available on the web, yet scientists require programmatic access to this data to create reproducible workflows. taxize was created to bridge this gap - to bring taxonomic data on the web into R, where the data can be easily manipulated, visualized, and analyzed in a reproducible workflow.

We have outlined a suite of use cases in taxize that will likely fit real use cases of many biologists. Of course we have not thought of all possible use cases, so we hope that the biology community can give us feedback on what use cases they want to see available in taxize. One thing we could change in the future is to make  functions that fit use cases, and then allow users to select the data source as a parameter in the function. This could possibly make the user interface easier to understand.

taxize is currently under development and will be for some time given the large number of data sources kitted together in the package, and the fact that APIs for each data source can change, requiring changes in taxize code. Contributions to taxize are strongly encouraged, and can be easily done using GitHub here \cite{github_taxize}. We hope taxize will be taking up by the community and developed collaboratively, making it progressively better through time as new use cases arise, bug reports squashed, and contributions merged.


% Do NOT remove this, even if you are not including acknowledgments
\section*{Acknowledgments}
The taxize package is part of the rOpenSci project \url{http://ropensci.org/}. We thank X, Y, and Z for comments on previous versions of this manuscript. SAC is supported by CANPOLIN of Canada, grant number XXXXXX. We thank all API maintainers for their work making their databases open to the public.

%\section*{References}
% The bibtex filename
\bibliography{refs}

\section*{Figure Legends}
\begin{figure}[!ht]
\begin{center}
%\includegraphics[width=4in]{figure/phylomaticphylogeny.pdf}
\end{center}
\caption{
{\bf A Phylogeny for the three species.}
}
\label{fig:phylomatic}
\end{figure}


\section*{Tables}

% \begin{table}[!ht]
% \caption{
% \bf{Data sources used in taxize, tasks available, and links to them}}
% \begin{tabular}{|l|c|c|c|c|}
% \hline
% Source name & Name search & Name resolution & Phylogeny & Sequences  \\
% \hline
% Encyclopedia of Life \cite{eol} & Yes & See GNR below & No & No \\
% Integrated Taxonomic Information System \cite{itis} & Yes & Synonyms & No & No \\
% iPlant Taxonomic Name Resolution Service \cite{tnrs} & Yes & Yes & No & No \\
% Phylomatic \cite{webb2005} & No & No & Yes & No \\
% uBio \cite{ubio} & Yes & Yes & No & No \\
% Global Names Resolver \cite{eolgnr} & Yes & Yes & No & No \\
% Global Names Index \cite{eolgni} & Yes & No & No & No \\
% IUCN Red List \cite{iucn} & Yes & No & No & No \\
% Tropicos \cite{tropicos} & Yes & Yes & No & No \\
% Plantminer \cite{carvalho2010plantminer} & Yes & No & No & No \\
% The Plant List & Yes & Yes & No & No \\
% Catalogue of Life \cite{col} & Yes & Yes & No & No \\
% National Center for Biotechnology Information \cite{federhen} & Yes & X & Yes \textsuperscript{a} & Yes \\
% \hline
% \end{tabular}
% \begin{flushleft}\textsuperscript{a} Web only, no API, see \url{http://1.usa.gov/11R446a}
% \end{flushleft}
% \label{tab:a}
% \end{table}

\begin{table}[!ht]
\caption{
\bf{Some key functions in taxize, what they do, and their data sources}}
\begin{tabular}{|l|L|L|}
\hline
Function name & What it does & Source \\
\hline
apg\_lookup & Changes names to match the APGIII list & Angiosperm Phylogeny Group \cite{apgiii}  \\
classification & Upstream classification & Various  \\
col\_children & Direct children & Catalogue of Life \cite{col}  \\
col\_downstream & Downstream taxa to specified rank & Catalogue of Life \cite{col}  \\
eol\_hierarchy & Upstream classification & Encyclopedia of Life \cite{eol}  \\
eol\_search & Search EOL taxon information & Encyclopedia of Life \cite{eol}  \\
get\_seqs & Get NCBI sequences & National Center for Biotechnology Information \cite{federhen}  \\
get\_tsn & Get ITIS TSN & Integrated Taxonomic Information System \cite{itis}  \\
get\_uid & Get NCBI UID & National Center for Biotechnology Information \cite{federhen}  \\
searchbycommonname & Search ITIS by common name & Integrated Taxonomic Information System \cite{itis}  \\
searchbyscientificname & Search ITIS by scientific name & Integrated Taxonomic Information System \cite{itis}  \\
gisd\_isinvasive & Inasiveness status & Global Invasive Species Database \cite{gisd}  \\
gni\_parse & Parse scientific names into components & Global Names Index \cite{eol,eolgni}   \\
gni\_search & Search EOL's global names index & Global Names Index \cite{eol,eolgni}   \\
gnr\_resolve & Resolve names using EOL's global names index & Global Names Resolver \cite{eol,eolgnr}  \\
itis\_downstream & Downstream taxa to specified rank & Integrated Taxonomic Information System \cite{itis}  \\
iucn\_status & IUCN status & IUCN Red List \cite{iucn}  \\
phylomatic\_tree & Get a plant Phylogeny & Phylomatic \cite{webb2005}  \\
plantminer & Search Plantminer & Plantminer \cite{carvalho2010plantminer}   \\
tax\_name & Get taxonomic name for specific rank & Various  \\
tax\_rank & Get rank of a taxonomic name & Various  \\
tnrs & Resolve names using iPlant & iPlant Taxonomic Name Resolution Service \cite{tnrs}  \\
tp\_acceptednames & Check for accepted names using Tropicos & Tropicos \cite{tropicos}  \\
tpl\_search & Search the Plant List & The Plant List \cite{theplantlist}  \\
ubio\_namebank & Search uBio & uBio \cite{ubio}  \\
\hline
\end{tabular}
\label{tab:a}
\end{table}

\end{document}
